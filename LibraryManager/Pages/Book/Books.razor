@page "/bookList"
@using LibraryManager.Components;
@using LibraryManager.Services;
@using ManageBooks.Dtos;

@inject IBookService BookService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@*<style>
    table {
        background:white;
    }
    th {
        color:black;
    }
    .section-table tr {
        border-bottom:1px solid black;
    }
    .section-table td {
    color: black;
}
</style>*@
	<div class="row mt-4">
		<SearchListBook OnSearch="SearchBook"></SearchListBook>
	</div>
	<div>
		<button class="btn btn-success mt-4" @onclick="CreateBook" style="width=200px">Thêm sách</button>

	</div>
	<div class="row mt-2">
		<table class="table">
			<thead>
				<tr>
					<th>Mã sách</th>
					<th>Tiêu đề</th>
					<th>Tác giả</th>
					<th>Nhà xuất bản</th>
					<th>Thể loại</th>
					<th>Tổng số bản in</th>
					<th>Số bản có sẵn</th>
					<th>Số lượt đặt mượn</th>
					
				</tr>
			</thead>
			<tbody>
				@foreach (var book in BookService.Books)
				{
					<tr>
						<td>@book.BookId</td>
						<td>@book.Title</td>
						<td>@book.Author</td>
						<td>@book.Publisher</td>
						<td>@book.Genre</td>
						<td>@book.TotalCopies</td>
						<td>@book.AvailableCopies</td>
						<td>@book.OrderCount</td>
						
						<td>
							<button class="btn btn-primary" @onclick="(()=>EditHandle(book.BookId))">
								<i class="oi oi-pencil"></i>
							</button>
						</td>
						<td>
							<button class="btn btn-danger" @onclick="(()=>DeleteHandle(book.BookId))">
								<i class="oi oi-x"></i>
							</button>
						</td>
					</tr>
				}


			</tbody>
		</table>
	</div>
	<Confirmation ConfirmationMessage="Are you sure to delete?"
			  ConfirmationTitle="Delete Book"
			  @ref="DeleteConfirmation"
			  ConfirmationChanged="OnConfirmDeleteBook">
	</Confirmation>


@code {
	private BookListSearch listSearch = new BookListSearch();

	protected Confirmation DeleteConfirmation { set; get; }

	private int DeleteId { set; get; }


	protected override async Task OnInitializedAsync()
	{
		await BookService.GetBooks(listSearch);
	}
	void EditHandle(int id)
	{
		NavigationManager.NavigateTo($"/bookEdit/{id}");
	}
	void CreateBook()
	{
		NavigationManager.NavigateTo("/bookCreate");
	}
	private async Task SearchBook (BookListSearch bookListSearch)
	{
		listSearch = bookListSearch;
		await BookService.GetBooks(listSearch);
	}
	public void DeleteHandle(int deleteId)
	{
		DeleteId = deleteId;
		DeleteConfirmation.Show();
	}

	public async Task OnConfirmDeleteBook(bool deleteConfirmed)
	{
		if (deleteConfirmed)
		{
			await BookService.DeleteBook(DeleteId);
			await BookService.GetBooks(listSearch);
		}

		
	}

}
